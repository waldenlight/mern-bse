[{"C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\index.js":"1","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\App.js":"2","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\pages\\SearchBooks.js":"3","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\pages\\SavedBooks.js":"4","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\components\\Navbar.js":"5","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\auth.js":"6","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\components\\SignupForm.js":"8","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\API.js":"9","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\mutations.js":"10","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\localStorage.js":"11"},{"size":266,"mtime":1683470774301,"results":"12","hashOfConfig":"13"},{"size":1901,"mtime":1683561447426,"results":"14","hashOfConfig":"13"},{"size":5177,"mtime":1683817048460,"results":"15","hashOfConfig":"13"},{"size":3207,"mtime":1683820716461,"results":"16","hashOfConfig":"13"},{"size":2567,"mtime":1683470774301,"results":"17","hashOfConfig":"13"},{"size":1234,"mtime":1683470774303,"results":"18","hashOfConfig":"13"},{"size":2806,"mtime":1683817700639,"results":"19","hashOfConfig":"13"},{"size":3467,"mtime":1683817504296,"results":"20","hashOfConfig":"13"},{"size":1392,"mtime":1683470774303,"results":"21","hashOfConfig":"13"},{"size":854,"mtime":1683560923674,"results":"22","hashOfConfig":"13"},{"size":793,"mtime":1683470774303,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ubhm7",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\index.js",[],[],"C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\App.js",[],[],"C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\pages\\SearchBooks.js",["62","63","64","65","66","67","68"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  Row\n} from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport { Link } from 'react-router-dom';\n\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  const [formState, setFormState] = useState({\n    authors: '',\n    description: '',\n  });\n\n  const [saveBook, { error, data }] = useMutation(SAVE_BOOK);\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      const { data } = saveBook({\n        variables: { ...formState },\n      });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook(bookId, token);\n\n      const { data } = saveBook({\n        variables: { ...formState },\n      });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <div className='text-light bg-dark pt-5'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Container>\n      </div>\n\n      <Container>\n        <h2 className='pt-5'>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <Row>\n          {searchedBooks.map((book) => {\n            return (\n              <Col md=\"4\">\n                <Card key={book.bookId} border='dark'>\n                  {book.image ? (\n                    <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                        className='btn-block btn-info'\n                        onClick={() => handleSaveBook(book.bookId)}>\n                        {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                          ? 'This book has already been saved!'\n                          : 'Save this Book!'}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\pages\\SavedBooks.js",["69","70","71","72"],[],"import React, { useState } from 'react';\nimport {\n  Container,\n  Card,\n  Button,\n  Row,\n  Col\n} from 'react-bootstrap';\n\nimport { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { useMutation, useQuery } from '@apollo/client';\n\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useQuery(REMOVE_BOOK);\n  const [deleteBook, { error }] = useMutation(REMOVE_BOOK);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  useQuery(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        const response = await getMe(token);\n\n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n\n        const user = await response.json();\n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook(bookId, token);\n\n      const { data } = deleteBook();\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const updatedUser = await response.json();\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <div fluid className='text-light bg-dark p-5'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </div>\n      <Container>\n        <h2 className='pt-5'>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <Row>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Col md=\"4\">\n                <Card key={book.bookId} border='dark'>\n                  {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                      Delete this Book!\n                    </Button>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\components\\Navbar.js",[],[],"C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\auth.js",["73"],[],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\components\\LoginForm.js",["74","75"],[],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/client';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await loginUser(userFormData);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\components\\SignupForm.js",["76","77"],[],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await createUser(userFormData);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\API.js",[],[],"C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\mutations.js",[],[],"C:\\Users\\Walden Light\\Desktop\\bootcamp\\mern-bse\\Develop\\client\\src\\utils\\localStorage.js",[],[],{"ruleId":"78","severity":1,"message":"79","line":12,"column":10,"nodeType":"80","messageId":"81","endLine":12,"endColumn":18},{"ruleId":"78","severity":1,"message":"82","line":15,"column":10,"nodeType":"80","messageId":"81","endLine":15,"endColumn":14},{"ruleId":"78","severity":1,"message":"83","line":36,"column":21,"nodeType":"80","messageId":"81","endLine":36,"endColumn":33},{"ruleId":"78","severity":1,"message":"84","line":41,"column":22,"nodeType":"80","messageId":"81","endLine":41,"endColumn":27},{"ruleId":"78","severity":1,"message":"85","line":41,"column":29,"nodeType":"80","messageId":"81","endLine":41,"endColumn":33},{"ruleId":"78","severity":1,"message":"85","line":54,"column":15,"nodeType":"80","messageId":"81","endLine":54,"endColumn":19},{"ruleId":"78","severity":1,"message":"85","line":94,"column":15,"nodeType":"80","messageId":"81","endLine":94,"endColumn":19},{"ruleId":"78","severity":1,"message":"86","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"87","line":10,"column":17,"nodeType":"80","messageId":"81","endLine":10,"endColumn":27},{"ruleId":"78","severity":1,"message":"84","line":19,"column":24,"nodeType":"80","messageId":"81","endLine":19,"endColumn":29},{"ruleId":"78","severity":1,"message":"85","line":60,"column":15,"nodeType":"80","messageId":"81","endLine":60,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":49,"column":1,"nodeType":"90","endLine":49,"endColumn":34},{"ruleId":"78","severity":1,"message":"91","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":19},{"ruleId":"78","severity":1,"message":"84","line":15,"column":23,"nodeType":"80","messageId":"81","endLine":15,"endColumn":28},{"ruleId":"78","severity":1,"message":"92","line":16,"column":10,"nodeType":"80","messageId":"81","endLine":16,"endColumn":17},{"ruleId":"78","severity":1,"message":"84","line":16,"column":21,"nodeType":"80","messageId":"81","endLine":16,"endColumn":26},"no-unused-vars","'saveBook' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setFormState' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'deleteBook' is defined but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'loginUser' is defined but never used.","'addUser' is assigned a value but never used."]